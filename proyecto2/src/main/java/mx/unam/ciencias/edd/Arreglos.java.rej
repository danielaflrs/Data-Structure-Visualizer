--- src/main/java/mx/unam/ciencias/edd/Arreglos.java
+++ src/main/java/mx/unam/ciencias/edd/Arreglos.java
@@ -18,9 +18,40 @@ public class Arreglos {
      */
     public static <T> void
     quickSort(T[] arreglo, Comparator<T> comparador) {
-        // Aquí va su código.
+	quickSort(arreglo,comparador, 0, arreglo.length-1);
     }
 
+    private static <T> void swap(T[] arreglo, int i, int j) {
+	T aux = arreglo[i];
+	arreglo[i] = arreglo[j];
+	arreglo[j] = aux;
+    }
+    
+    
+    private static <T> void
+	quickSort(T[] arreglo, Comparator<T> comparador, int a, int b) {
+	if (a >= b)
+	    return;
+	int i = a + 1;
+	int j = b;
+	while(i < j) {
+	    if((comparador.compare(arreglo[i],arreglo[a]) > 0) && (comparador.compare(arreglo[j], arreglo[a]) <= 0)){
+		swap(arreglo, i, j);
+		i++;
+		j--;
+	    } else if (comparador.compare(arreglo[i],arreglo[a]) <= 0) {
+		i++;
+	    } else {
+		j--;
+	    }
+	}
+	if (comparador.compare(arreglo[i],arreglo[a]) > 0){
+	    i--;
+	}
+	swap(arreglo,a,i);
+	quickSort(arreglo, comparador, a, i-1);
+	quickSort(arreglo, comparador, i+1, b);
+    }
     /**
      * Ordena el arreglo recibido usando QickSort.
      * @param <T> tipo del que puede ser el arreglo.
@@ -39,7 +70,13 @@ public class Arreglos {
      */
     public static <T> void
     selectionSort(T[] arreglo, Comparator<T> comparador) {
-        // Aquí va su código.
+	for(int i=0; i < arreglo.length; i++){
+	    for(int j = i +1; j < arreglo.length; j++){
+		if(comparador.compare(arreglo[j],arreglo[i]) < 0){
+		    swap(arreglo,i,j);
+		}
+	    }
+	}
     }
 
     /**
@@ -64,6 +101,23 @@ public class Arreglos {
     public static <T> int
     busquedaBinaria(T[] arreglo, T elemento, Comparator<T> comparador) {
         // Aquí va su código.
+	int a = 0;
+	int b = arreglo.length-1;
+	int e;
+	
+	while(a <= b){
+	    e = (a + b)/2;
+	    if(comparador.compare(arreglo[e],elemento) == 0){
+		return e;
+	    }
+	    else if(comparador.compare(arreglo[e],elemento) < 0){
+		a = e+1;		    
+	    }
+	    else{
+		b = e-1;
+	    }
+	}
+	return -1;
     }
 
     /**
